{"version":3,"sources":["FBAppEventsLogger.js"],"names":["AppEventsLogger","require","NativeModules","FBAppEventsLogger","Platform","module","exports","setFlushBehavior","flushBehavior","logEvent","eventName","args","valueToSum","shift","parameters","logPurchase","purchaseAmount","currencyCode","logPushNotificationOpen","payload","flush","setUserID","userID","getUserID","getAnonymousID","getAdvertiserID","getAttributionID","OS","updateUserProperties","setUserData","userData","setPushNotificationsDeviceToken","deviceToken","setPushNotificationsRegistrationId","registrationId"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AppEventsLogger = require('react-native').NativeModules.FBAppEventsLogger;\nconst {Platform} = require('react-native');\n/**\n * Controls when an AppEventsLogger sends log events to the server\n */\ntype AppEventsFlushBehavior =\n  /**\n   * Flush automatically: periodically (every 15 seconds or after every 100 events), and\n   * always at app reactivation. This is the default value.\n   */\n  | 'auto'\n  /**\n   * Only flush when AppEventsLogger.flush() is explicitly invoked.\n   */\n  | 'explicit_only';\ntype Params = {[key: string]: string | number};\n\n/**\n * Info about a user to increase chances of matching a Facebook user.\n * See https://developers.facebook.com/docs/app-events/advanced-matching for\n * more info about the expected format of each field.\n */\ntype UserData = $ReadOnly<{|\n  email?: ?string,\n  firstName?: ?string,\n  lastName?: ?string,\n  phone?: ?string,\n  dateOfBirth?: ?string,\n  gender?: ?('m' | 'f'),\n  city?: ?string,\n  state?: ?string,\n  zip?: ?string,\n  country?: ?string,\n|}>;\n\nmodule.exports = {\n  /**\n   * Sets the current event flushing behavior specifying when events\n   * are sent back to Facebook servers.\n   */\n  setFlushBehavior(flushBehavior: AppEventsFlushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n\n  /**\n   * Logs an event with eventName and optional arguments.\n   * This function supports the following usage:\n   * logEvent(eventName: string);\n   * logEvent(eventName: string, valueToSum: number);\n   * logEvent(eventName: string, parameters: {[key:string]:string|number});\n   * logEvent(eventName: string, valueToSum: number, parameters: {[key:string]:string|number});\n   * See https://developers.facebook.com/docs/app-events/android for detail.\n   */\n  logEvent(eventName: string, ...args: Array<number | Params>) {\n    let valueToSum = 0;\n    if (typeof args[0] === 'number') {\n      valueToSum = args.shift();\n    }\n    let parameters = null;\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n\n  /**\n   * Logs a purchase. See http://en.wikipedia.org/wiki/ISO_4217 for currencyCode.\n   */\n  logPurchase(\n    purchaseAmount: number,\n    currencyCode: string,\n    parameters?: ?Params,\n  ) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n\n  /**\n   * Logs an app event that tracks that the application was open via Push Notification.\n   */\n  logPushNotificationOpen(payload: ?Object) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n\n  /**\n   * Explicitly kicks off flushing of events to Facebook.\n   */\n  flush() {\n    AppEventsLogger.flush();\n  },\n\n  /**\n   * Sets a custom user ID to associate with all app events.\n   * The userID is persisted until it is cleared by passing nil.\n   */\n  setUserID(userID: string | null) {\n    AppEventsLogger.setUserID(userID);\n  },\n\n  /**\n   * Returns user id or null if not set\n   */\n  async getUserID(): Promise<?string> {\n    return await AppEventsLogger.getUserID();\n  },\n\n  /**\n   * Returns anonymous id or null if not set\n   */\n  async getAnonymousID(): Promise<?string> {\n    return await AppEventsLogger.getAnonymousID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set\n   */\n  async getAdvertiserID(): Promise<?string> {\n    return await AppEventsLogger.getAdvertiserID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set.\n   * @platform android\n   */\n  async getAttributionID(): Promise<?string> {\n    if (Platform.OS === 'ios') {\n      return null;\n    }\n    return await AppEventsLogger.getAttributionID();\n  },\n\n  /**\n   * Sends a request to update the properties for the current user, set by\n   * setUserID. You must call setUserID before making this call.\n   */\n  updateUserProperties(parameters: Params) {\n    AppEventsLogger.updateUserProperties(parameters);\n  },\n\n  /**\n   * Set additional data about the user to increase chances of matching a Facebook user.\n   */\n  setUserData(userData: UserData) {\n    AppEventsLogger.setUserData(userData);\n  },\n\n  /**\n   * For iOS only, sets and sends device token to register the current application for push notifications.\n   * @platform ios\n   */\n  setPushNotificationsDeviceToken(deviceToken: string) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n\n  /**\n   * For Android only, sets and sends registration id to register the current app for push notifications.\n   * @platform Android\n   */\n  setPushNotificationsRegistrationId(registrationId: string) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  },\n};\n"]}